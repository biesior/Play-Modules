# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="i`rWH@;2V3j9t<6Z_DSpyBtx0g6vZ`T1RU?pBN0:O?;ypZTg[yBV7h=Gy8DpiMn;"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# global=Global

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=
db.default.driver="org.postgresql.Driver"
db.default.url="jdbc:postgresql://localhost:5432/modules"
db.default.user=playmodules
db.default.password=password
db.default.logStatements=true

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# SQL logger
logger.com.jolbox.bonecp=DEBUG


# Assets configuration
# This allows us to set future expire dates for some static resources
# Be aware that if you modify the resource you'll need to change the name to override the cache, or the user
# won't get it!!
# Default is set to 10 years
# ~~~~~
assets.defaultCache="max-age=3600"
"assets.cache./public/stylesheets/bootstrap.min.css"="max-age=315360000"
"assets.cache./public/javascripts/bootstrap.min.js"="max-age=315360000"
"assets.cache./public/javascripts/jquery-1.7.1.min.js"="max-age=315360000"
"assets.cache./public/javascripts/modernizr-2.5.2-respond-1.1.0.min.js"="max-age=315360000"
"assets.cache./public/images/favicon.png"="max-age=315360000"

# Assets like github keys are obtained from Environment vars (as done with Heroku deployments)
# To test in dev, create a bash script (or equivalent) that executes
#
# play debug -Dproperty=value run
#
# Java properties will be used (and override) configuration

# GitHub codes
# ~~~~~~
# github.clientId=${?github.clientId}
# github.secret=${?github.secret}
github.authorizeURL="https://github.com/login/oauth/authorize"
github.getTokenURL="https://github.com/login/oauth/access_token"
github.getUser="https://api.github.com/user"

# Twitter codes
# ~~~~~~
# twitter.clientId=${?twitter.clientId}
# twitter.secret=${?twitter.secret}
twitter.requestTokenURL="https://api.twitter.com/oauth/request_token"
twitter.authorizeURL="https://api.twitter.com/oauth/authorize"
twitter.accessTokenURL="https://api.twitter.com/oauth/access_token"
twitter.credentials="http://api.twitter.com/1/account/verify_credentials.json"

# Google
# ~~~~~~~
google.openid="https://www.google.com/accounts/o8/id"
#google.analytics=${?google.analytics}

# Disqus code
# ~~~~~~~
# disqus.forum={?disqus.forum}
# Dev mode is 1 for Dev, 0 for Prod
# disqus.devMode=1